# vi: set ft=sh:

function if_os() {
    [[ "$OSTYPE" == *"$1"* ]];
}

function is_linux() {
    if_os linux
}

function is_openwrt() {
    is_linux && test -f "/etc/openwrt_version"
}

function is_darwin() {
    if_os darwin
}

function is_windows() {
    case "$OSTYPE" in
        *cygwin* | *msys* | *win32* ) sys="windows";;
    esac
    [[ "${sys}" == "windows" ]];
}

function screen() {
    echo "Ditch screen and use tmux. If you still want to use screen, then try 'command screen'.";
}

function tmux() {
    tmux_version=`command tmux -V | awk -F " " '{print $2}'`
    if [[ "${tmux_version}" == "2.2" ]]; then
        # need this for tmux version 2.2 only.
        if is_darwin; then
            export EVENT_NOKQUEUE=1
            export EVENT_NOPOLL=1
        elif is_linux; then
            export EVENT_NOEPOLL=1
        fi
    fi
    command tmux -2 $@
}

function binary_exists() {
    command -v $1 > /dev/null 2>&1
}

if binary_exists nvim ; then
    function vim() {
        nvim $@
    }
fi

if binary_exists vim ; then
    function vi() {
        vim $@
    }
fi

if ! binary_exists vimdiff ; then
    function vimdiff() {
        vi -d $@
    }
fi

function svn_diff() {
    svn diff --internal-diff "$@" | vi -R -
}

function git_diff() {
    git diff --no-ext-diff -w "$@" | vi -R -
}

function upgrade_ohmyzsh() {
    omz update
}

function upgrade_vim_plugins() {
    vi +PlugUpdate +PlugUpgrade +qa
}

function upgrade_tmux_plugins() {
    ${HOME}/.tmp/tmux/plugins/tpm/bin/update_plugins all
}

if is_darwin || is_linux; then
    function upgrade_brew_packages() {
        echo "====>>>> Updating homebrew"
        brew update
        echo "====>>>> Upgrading outdated brew packages"
        brew upgrade
        if is_darwin; then
            echo "====>>>> Upgrading outdated cask packages"
            brew upgrade --cask --greedy
        fi
        echo "====>>>> Cleaning up brew cached downloads"
        brew cleanup --prune=all
        brew autoremove
    }

    function list_brew_deps() {
        brew leaves | xargs brew deps --installed --for-each | sed "s/^.*:/$(tput setaf 4)&$(tput sgr0)/"
    }
fi

if is_openwrt; then
    function upgrade_opkg_packages() {
        opkg update && opkg list-upgradable | awk '{print $1}' | xargs -r opkg upgrade
    }
fi

if is_linux; then
    function open() {
        xdg-open $@
    }

    function clean_old_snaps() {
        echo "====>>>> Cleaning up cask cached downloads"
        LANG=C snap list --all | awk '/disabled/{print $1, $3}' |
            while read snapname revision; do
                sudo snap remove "$snapname" --revision="$revision"
            done
        echo "====>>>> Done"
    }

fi

if is_darwin; then
    # https://medium.com/@edgar/use-openconnect-as-a-replacement-for-cisco-anyconnect-vpn-client-in-mac-36eab0812718
    vpn-setup() {
        # sudo sh -c 'echo "%admin ALL=(ALL) NOPASSWD: /usr/local/bin/openconnect, /bin/kill" > /etc/sudoers.d/openconnect'
        sudo sh -c 'echo "%admin ALL=(ALL) NOPASSWD: /usr/local/bin/openconnect" > /etc/sudoers.d/openconnect'
    }

    vpn-up() {
        sudo openconnect --quiet --background --protocol=gp --user=$USERNAME connect.digitalguardian.com
           # --passwd-on-stdin \
    }

    vpn-down() {
        sudo kill -2 $(pgrep openconnect)
    }

    # Synergy not working?? Run this function to find out whoz locking up the keyboard.
    secureinputtest() {
        osascript -l JavaScript << END_TEXT
        while (true) {
          ObjC.bindFunction('IsSecureEventInputEnabled', ['bool', []]);
          console.log( $.IsSecureEventInputEnabled() ?
            "SecureEventInput is enabled" :
            "SecureEventInput is not enabled");
          delay(1);
        }
END_TEXT
    }

    if binary_exists podman; then
        alias docker=podman
    fi
fi
