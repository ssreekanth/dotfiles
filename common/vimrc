set nocompatible              " be iMproved, required

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source ~/.vimrc
endif

let vim_plugin_tmp_dir=$HOME."/.tmp/vim/plugged"

call plug#begin(vim_plugin_tmp_dir)

Plug 'mhinz/vim-startify'

" Golang plugins
Plug 'fatih/vim-go'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Themes / Color Schemes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'

" Typescript syntax highlighting and other settings.
Plug 'leafgarland/typescript-vim'

" Cursorline highlighter
Plug 'miyakogi/conoline.vim'

" File Explorer
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'

" Super Editing
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/vim-easy-align'
"Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'kana/vim-textobj-user'
Plug 'glts/vim-textobj-comment'
Plug 'tpope/vim-commentary'

" Git plugins
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'juneedahamed/svnj.vim'

" AutoComplete / Syntax Checking / Code Navigation
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'

Plug 'wikitopian/hardmode'
Plug 'takac/vim-hardtime'

Plug 'easymotion/vim-easymotion'
Plug 'dietsche/vim-lastplace'

" Zoom in/out current window
Plug 'szw/vim-maximizer'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""

set timeoutlen=1000
set laststatus=2
if !has('nvim')
    set encoding=utf-8
endif
set t_Co=256

if has("gui_running")
    set guioptions-=T " no toolbar
    set lines=60 columns=180 linespace=0
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        set guifont=Inconsolata\ for\ Powerline:h13
    elseif s:uname == "Linux\n"
        set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
    else
        set guifont=Powerline\ Consolas\ 13
    endif
endif

set background=dark
" colorscheme jellybeans
silent! colorscheme gruvbox

" mark just the first character going out of the specified column
"highlight ColorColumn ctermbg=magenta
set colorcolumn=80

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-airline settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:airline_theme='jellybeans'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Conoline settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:conoline_auto_enable = 1
let g:conoline_use_colorscheme_default_normal=1
let g:conoline_use_colorscheme_default_insert=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrlp settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildignore+=*.o,*.os,*.a,*.so,*.pyc,*/.git/*,*/.svn/*
set wildignore+=*.o,*.os,*.a,*.so,*.pyc,*\\.git\\*,*\\.svn\\*
if filereadable(".gitignore")
    " let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat .gitignore`"'
    let g:ctrlp_user_command = {
      \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files --cached --others --exclude-standard'],
        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
      \ 'fallback': 'find %s -type f'
      \ }
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-go settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
" coc.nvim will do 'gd' resolution
let g:go_def_mapping_enabled = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" coc.nvim default settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>jd :YcmCompleter GoTo<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_html_tidy_blocklevel_tags=["ion-nav-view", "ion-content", "ion-pane",
            \ "ion-header-bar", "ion-list", "ion-item",
            \ "webview"]
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" old vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

set hlsearch

" syntax on
set autoindent
set nowrap

set noshowmode
set showmatch

set tabstop=4
set shiftwidth=4
set expandtab
silent! retab

set relativenumber
set number

" Enable smartcase.
" If the search pattern contains any uppercase character, then it will do
" a case sensitive search. Otherwise, it does case insensitive search.
" You can use \c and \C to override this.
set ignorecase
set smartcase

" toggle invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>l :set list!<cr>

if !has('nvim')
    set backupdir=~/.tmp
else
    set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp,.
endif
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp,.
set undodir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp,.

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Compatibility between vim and nvim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !has('nvim')
    set ttymouse=xterm2
endif
set mouse=a

" use ESC to exit terminal mode.
if exists(':tnoremap')
    tnoremap <Esc> <C-\><C-n>
endif
